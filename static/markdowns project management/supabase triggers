[
  {
    "function_name": "validate_material_pricing",
    "function_definition": "CREATE OR REPLACE FUNCTION public.validate_material_pricing()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.pricing_type = 'fixed' AND NEW.pricing_formula IS NOT NULL THEN\r\n    RAISE EXCEPTION 'Fixed pricing should not have a pricing formula';\r\n  END IF;\r\n  IF NEW.pricing_type = 'calculated' AND NEW.pricing_formula IS NULL THEN\r\n    RAISE EXCEPTION 'Calculated pricing requires a pricing formula';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "validate_process_quantities",
    "function_definition": "CREATE OR REPLACE FUNCTION public.validate_process_quantities()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  parent_min INT;\r\n  parent_max INT;\r\nBEGIN\r\n  -- Check if this is a dependent process\r\n  SELECT pp.min_quantity, pp.max_quantity \r\n  INTO parent_min, parent_max\r\n  FROM process_dependencies pd\r\n  JOIN production_processes pp ON pp.id = pd.primary_process_id\r\n  WHERE pd.dependent_process_id = NEW.id;\r\n\r\n  IF FOUND THEN\r\n    -- Ensure dependent process quantities are within parent process range\r\n    IF NEW.min_quantity < parent_min THEN\r\n      RAISE EXCEPTION 'Minimum quantity cannot be less than parent process minimum (%)', parent_min;\r\n    END IF;\r\n    \r\n    IF NEW.max_quantity IS NOT NULL AND parent_max IS NOT NULL AND NEW.max_quantity > parent_max THEN\r\n      RAISE EXCEPTION 'Maximum quantity cannot exceed parent process maximum (%)', parent_max;\r\n    END IF;\r\n  END IF;\r\n\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "check_one_primary_per_process",
    "function_definition": "CREATE OR REPLACE FUNCTION public.check_one_primary_per_process()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    IF NEW.is_primary THEN\n        IF EXISTS (\n            SELECT 1 FROM equipment_process_mappings\n            WHERE process_id = NEW.process_id \n            AND is_primary = true \n            AND id != NEW.id\n        ) THEN\n            RAISE EXCEPTION 'Only one primary equipment allowed per process';\n        END IF;\n    END IF;\n    RETURN NEW;\nEND;\n$function$\n"
  },
  {
    "function_name": "check_circular_dependency",
    "function_definition": "CREATE OR REPLACE FUNCTION public.check_circular_dependency()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF EXISTS (\r\n    WITH RECURSIVE dependency_chain AS (\r\n      -- Base case: direct dependencies\r\n      SELECT dependent_process_id, primary_process_id, ARRAY[NEW.primary_process_id] AS path\r\n      FROM process_dependencies\r\n      WHERE primary_process_id = NEW.dependent_process_id\r\n      \r\n      UNION ALL\r\n      \r\n      -- Recursive case\r\n      SELECT pd.dependent_process_id, pd.primary_process_id, dc.path || pd.primary_process_id\r\n      FROM process_dependencies pd\r\n      INNER JOIN dependency_chain dc ON pd.primary_process_id = dc.dependent_process_id\r\n      WHERE NOT pd.primary_process_id = ANY(dc.path)\r\n    )\r\n    SELECT 1 FROM dependency_chain WHERE dependent_process_id = NEW.primary_process_id\r\n  ) THEN\r\n    RAISE EXCEPTION 'Circular dependency detected';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "handle_new_user",
    "function_definition": "CREATE OR REPLACE FUNCTION public.handle_new_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  INSERT INTO public.profiles (id, full_name, avatar_url)\r\n  VALUES (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\r\n  RETURN new;\r\nEND;\r\n$function$\n"
  }
]